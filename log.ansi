Archivos Entregados
===================

[01;34m.[00m
├── [ 697]  makefile
├── [6.8K]  pruebas.c
└── [  80]  [01;34msrc[00m
    ├── [8.0K]  abb.c
    └── [3.4K]  abb.h

1 directory, 4 files

Compilación y pruebas
=====================

rm -f *.o pruebas_chanutron
gcc -std=c99 -Wall -Wconversion -Wtype-limits -pedantic -Werror -O2 -g src/*.c pruebas_chanutron.c -o pruebas_chanutron
rm -f *.c
valgrind --leak-check=full --track-origins=yes --show-reachable=yes --error-exitcode=2 --show-leak-kinds=all --trace-children=yes ./pruebas_chanutron
==17739== Memcheck, a memory error detector
==17739== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==17739== Using Valgrind-3.19.0 and LibVEX; rerun with -h for copyright info
==17739== Command: ./pruebas_chanutron
==17739== 
[33;1m
Pruebas de creación de ABB
===========================[37;1m
[32;1m✓ [37;1mSe puede crear un abb
[32;1m✓ [37;1mEl abb se crea vacío
[32;1m✓ [37;1mLa cantidad de elementos es cero
[32;1m✓ [37;1mEl elemento raíz es NULL
==17740== 
==17740== HEAP SUMMARY:
==17740==     in use at exit: 0 bytes in 0 blocks
==17740==   total heap usage: 1 allocs, 1 frees, 12 bytes allocated
==17740== 
==17740== All heap blocks were freed -- no leaks are possible
==17740== 
==17740== For lists of detected and suppressed errors, rerun with: -s
==17740== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de inserción
=====================[37;1m
[32;1m✓ [37;1mPuedo insertar un elemento en el abb.
[32;1m✓ [37;1mEl elemento queda como valor raíz
[32;1m✓ [37;1mEl abb ya no está vacío.
[32;1m✓ [37;1mLa cantidad de elementos es 1
[32;1m✓ [37;1mPuedo insertar un elemento menor que el primero.
[32;1m✓ [37;1mEl abb queda con un hijo izquierdo y sin hijo derecho.
[32;1m✓ [37;1mEl elemento queda a la izquierda de la raíz.
[32;1m✓ [37;1mLa cantidad de elementos es 2
[32;1m✓ [37;1mPuedo insertar un elemento mayor que el primero.
[32;1m✓ [37;1mEl abb queda con un hijo izquierdo y un hijo derecho.
[32;1m✓ [37;1mEl elemento queda a la derecha de la raíz.
[32;1m✓ [37;1mLa cantidad de elementos es 3
[32;1m✓ [37;1mLos tres elementos se encuentran en las posiciones esperadas.
[32;1m✓ [37;1mPuedo insertar un elemento menor a los que estaban.
[32;1m✓ [37;1mEl hijo izquierdo del raíz ahora tiene un hijo izquierdo.
[32;1m✓ [37;1mEl elemento tiene el valor esperado.
[32;1m✓ [37;1mLa cantidad de elementos es 4
[32;1m✓ [37;1mPuedo insertar un elemento mayor a los que estaban.
[32;1m✓ [37;1mEl hijo derecho del raíz ahora tiene un hijo derecho.
[32;1m✓ [37;1mEl elemento tiene el valor esperado.
[32;1m✓ [37;1mLa cantidad de elementos es 5
==17741== 
==17741== HEAP SUMMARY:
==17741==     in use at exit: 0 bytes in 0 blocks
==17741==   total heap usage: 6 allocs, 6 frees, 72 bytes allocated
==17741== 
==17741== All heap blocks were freed -- no leaks are possible
==17741== 
==17741== For lists of detected and suppressed errors, rerun with: -s
==17741== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de búsqueda
====================[37;1m
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBusco un elemento existente y lo encuentro
[32;1m✓ [37;1mBuscar un elemento inexistente devuelve NULL.
==17742== 
==17742== HEAP SUMMARY:
==17742==     in use at exit: 0 bytes in 0 blocks
==17742==   total heap usage: 11 allocs, 11 frees, 132 bytes allocated
==17742== 
==17742== All heap blocks were freed -- no leaks are possible
==17742== 
==17742== For lists of detected and suppressed errors, rerun with: -s
==17742== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de borrado
==================[37;1m
[32;1m✓ [37;1mPuedo borrar un nodo hoja
[32;1m✓ [37;1mEl nodo eliminado no existe mas.
[32;1m✓ [37;1mLa cantidad de elementos es 6
[32;1m✓ [37;1mPuedo borrar un nodo no hoja con un hijo.
[32;1m✓ [37;1mEl nodo que queda en su lugar es el nodo hijo.
[32;1m✓ [37;1mLa cantidad de elementos es 5
[32;1m✓ [37;1mPuedo borrar un nodo con dos hijos.
[32;1m✓ [37;1mEl nodo que queda en su lugar es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mPuedo borrar el nodo raíz (con dos hijos).
[32;1m✓ [37;1mEl nodo que queda en su lugar es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mLa cantidad de elementos es 3
[32;1m✓ [37;1mA la izquierda de la raíz queda el elemento esperado.
[32;1m✓ [37;1mA la derecha de la raíz queda el elemento esperado.
[32;1m✓ [37;1mPuedo borrar el nodo raíz (con un hijo).
[32;1m✓ [37;1mEl nodo que queda en su lugar es el unico hijo.
[32;1m✓ [37;1mA la izquierda de la raíz queda el elemento esperado.
[32;1m✓ [37;1mA la derecha de la raíz queda el elemento esperado.
[32;1m✓ [37;1mPuedo borrar otro nodo hoja.
[32;1m✓ [37;1mA la izquierda de la raíz queda el elemento esperado.
[32;1m✓ [37;1mA la derecha de la raíz queda el elemento esperado.
[32;1m✓ [37;1mPuedo borrar el nodo raíz (sin hijos).
[32;1m✓ [37;1mLa cantidad de elementos es 0
[32;1m✓ [37;1mNo queda nadie en la raíz, abb vacío.
[32;1m✓ [37;1mLa funcion abb_vacio devuelve true.
==17743== 
==17743== HEAP SUMMARY:
==17743==     in use at exit: 0 bytes in 0 blocks
==17743==   total heap usage: 10 allocs, 10 frees, 104 bytes allocated
==17743== 
==17743== All heap blocks were freed -- no leaks are possible
==17743== 
==17743== For lists of detected and suppressed errors, rerun with: -s
==17743== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de borrado (siempre borra la raíz)
===========================================[37;1m
[32;1m✓ [37;1mPuedo borrar la raíz del abb.
[32;1m✓ [37;1mEl elemento que queda en la raíz es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mPuedo borrar la raíz del abb.
[32;1m✓ [37;1mEl elemento que queda en la raíz es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mPuedo borrar la raíz del abb.
[32;1m✓ [37;1mEl elemento que queda en la raíz es el predecesor inorden ¯\_(ツ)_/¯ .
[32;1m✓ [37;1mLa cantidad de elementos es 7
[32;1m✓ [37;1mPude eliminar todos los elementos restantes del abb siempre borrando la raíz.
[32;1m✓ [37;1mEl abb queda vacío.
==17744== 
==17744== HEAP SUMMARY:
==17744==     in use at exit: 0 bytes in 0 blocks
==17744==   total heap usage: 18 allocs, 18 frees, 160 bytes allocated
==17744== 
==17744== All heap blocks were freed -- no leaks are possible
==17744== 
==17744== For lists of detected and suppressed errors, rerun with: -s
==17744== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de insertar/eliminar/buscar
===================================[37;1m
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mBorro la raiz del abb.
[32;1m✓ [37;1mEl elemento no existe mas en el abb.
[32;1m✓ [37;1mPuedo volver a insertar el elemento.
[32;1m✓ [37;1mEl elemento existe en el abb y puedo buscarlo.
[32;1m✓ [37;1mSe puede eliminar todos los elementos del abb sin problemas.
[32;1m✓ [37;1mEl abb queda vacío.
[32;1m✓ [37;1mSe pueden volver a insertar elementos en el abb.
[32;1m✓ [37;1mBusco un elemento y lo encuentro
[32;1m✓ [37;1mBusco un elemento y lo encuentro
[32;1m✓ [37;1mBusco un elemento y lo encuentro
==17745== 
==17745== HEAP SUMMARY:
==17745==     in use at exit: 0 bytes in 0 blocks
==17745==   total heap usage: 32 allocs, 32 frees, 336 bytes allocated
==17745== 
==17745== All heap blocks were freed -- no leaks are possible
==17745== 
==17745== For lists of detected and suppressed errors, rerun with: -s
==17745== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de destructor
=====================[37;1m
[32;1m✓ [37;1mLuego de llamar a abb_destruir_todo, se invoca el destructor la cantidad de veces correcta.
[32;1m✓ [37;1mEl destructor fue invocado sobre los elementos correctos
==17746== 
==17746== HEAP SUMMARY:
==17746==     in use at exit: 0 bytes in 0 blocks
==17746==   total heap usage: 15 allocs, 15 frees, 164 bytes allocated
==17746== 
==17746== All heap blocks were freed -- no leaks are possible
==17746== 
==17746== For lists of detected and suppressed errors, rerun with: -s
==17746== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas de recorridos e iterador interno
========================================[37;1m
[33;1m
Recorrido inorden
=================[37;1m
[32;1m✓ [37;1mLa función de recorrido devuelve la cantidad de elementos esperados
[32;1m✓ [37;1mLos elementos en el vector tienen el orden esperado.
[32;1m✓ [37;1mPido recorrer menos elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[32;1m✓ [37;1mPido recorrer mas elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[33;1m
Recorrido preorden
==================[37;1m
[32;1m✓ [37;1mLa función de recorrido devuelve la cantidad de elementos esperados
[32;1m✓ [37;1mLos elementos en el vector tienen el orden esperado.
[32;1m✓ [37;1mPido recorrer menos elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[32;1m✓ [37;1mPido recorrer mas elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[33;1m
Recorrido postorden
===================[37;1m
[32;1m✓ [37;1mLa función de recorrido devuelve la cantidad de elementos esperados
[32;1m✓ [37;1mLos elementos en el vector tienen el orden esperado.
[31;1m✗ [37;1mPido recorrer menos elementos de los existentes para hacer el recorrido.
[31;1m✗ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[32;1m✓ [37;1mPido recorrer mas elementos de los existentes para hacer el recorrido.
[32;1m✓ [37;1mLos elementos en el vector tienen el orden y cantidad esperado.
[33;1m
Iterador interno inorden
========================[37;1m
[32;1m✓ [37;1mEl iterador interno devuelve la cantidad de elementos que se esperaba iterar.
[32;1m✓ [37;1mSe invocó la función la cantidad de veces esperada.
[32;1m✓ [37;1mSe recorrieron las claves en el orden esperado.
[32;1m✓ [37;1mCuando la función devuelve false, deja de iterar y devuelve la cantidad correcta.
[32;1m✓ [37;1mSe invocó la función de iteracion la cantidad de veces esperada.
[33;1m
Iterador interno preorden
=========================[37;1m
[32;1m✓ [37;1mEl iterador interno devuelve la cantidad de elementos que se esperaba iterar.
[32;1m✓ [37;1mSe invocó la función la cantidad de veces esperada.
[32;1m✓ [37;1mSe recorrieron las claves en el orden esperado.
[32;1m✓ [37;1mCuando la función devuelve false, deja de iterar y devuelve la cantidad correcta.
[32;1m✓ [37;1mSe invocó la función de iteracion la cantidad de veces esperada.
[33;1m
Iterador interno postorden
==========================[37;1m
[32;1m✓ [37;1mEl iterador interno devuelve la cantidad de elementos que se esperaba iterar.
[32;1m✓ [37;1mSe invocó la función la cantidad de veces esperada.
[32;1m✓ [37;1mSe recorrieron las claves en el orden esperado.
[32;1m✓ [37;1mCuando la función devuelve false, deja de iterar y devuelve la cantidad correcta.
[32;1m✓ [37;1mSe invocó la función de iteracion la cantidad de veces esperada.
==17748== 
==17748== HEAP SUMMARY:
==17748==     in use at exit: 0 bytes in 0 blocks
==17748==   total heap usage: 13 allocs, 13 frees, 156 bytes allocated
==17748== 
==17748== All heap blocks were freed -- no leaks are possible
==17748== 
==17748== For lists of detected and suppressed errors, rerun with: -s
==17748== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas con NULL
================[37;1m
[32;1m✓ [37;1mNo puedo insertar nada en un abb nulo.
[32;1m✓ [37;1mNo puedo buscar nada en un abb nulo.
[32;1m✓ [37;1mNo puedo borrar nada de en un abb nulo.
[32;1m✓ [37;1mUn abb nulo es vacío.
[32;1m✓ [37;1mLa cantidad de elementos de un abb NULL es 0
[32;1m✓ [37;1mNo puedo iterar un abb nulo.
[32;1m✓ [37;1mNo puedo iterar con una funcion nula.
[32;1m✓ [37;1mPuedo iterar con puntero extra nulo.
[32;1m✓ [37;1mPuedo insertar elementos null sin problemas
[32;1m✓ [37;1mPuedo insertar elementos null sin problemas
[32;1m✓ [37;1mPuedo insertar elementos null sin problemas
==17749== 
==17749== HEAP SUMMARY:
==17749==     in use at exit: 0 bytes in 0 blocks
==17749==   total heap usage: 15 allocs, 15 frees, 180 bytes allocated
==17749== 
==17749== All heap blocks were freed -- no leaks are possible
==17749== 
==17749== For lists of detected and suppressed errors, rerun with: -s
==17749== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
------------ MÁS PRUEBAS DEL TDA ABB ------------
==================================================[37;1m
[33;1m
PRUEBAS DE CREACIÓN Y DESTRUCCIÓN
===================================[37;1m
[33;1m
Destrucción de abbs NULL
=========================[37;1m
[32;1m✓ [37;1mSe está por probar si es posible destruir un abb nulo.
[32;1m✓ [37;1mSe está por probar si es posible destruir un abb nulo con un destructor válido.
==17751== 
==17751== HEAP SUMMARY:
==17751==     in use at exit: 0 bytes in 0 blocks
==17751==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17751== 
==17751== All heap blocks were freed -- no leaks are possible
==17751== 
==17751== For lists of detected and suppressed errors, rerun with: -s
==17751== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Creación de abbs con comparador válido e inválido
====================================================[37;1m
[32;1m✓ [37;1mSe crea el abb.
[32;1m✓ [37;1mEl abb se crea vacío.
[32;1m✓ [37;1mEl tamaño de un abb recién creado es 0.
[32;1m✓ [37;1mSe está por probar si es posible destruir un abb vacío.
[32;1m✓ [37;1mSe crea otro abb.
[32;1m✓ [37;1mSe está por probar si es posible destruir este abb vacío con un destructor nulo.
[32;1m✓ [37;1mNo es posible crear un abb con un comparador nulo.
==17752== 
==17752== HEAP SUMMARY:
==17752==     in use at exit: 0 bytes in 0 blocks
==17752==   total heap usage: 2 allocs, 2 frees, 24 bytes allocated
==17752== 
==17752== All heap blocks were freed -- no leaks are possible
==17752== 
==17752== For lists of detected and suppressed errors, rerun with: -s
==17752== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==17750== 
==17750== HEAP SUMMARY:
==17750==     in use at exit: 0 bytes in 0 blocks
==17750==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17750== 
==17750== All heap blocks were freed -- no leaks are possible
==17750== 
==17750== For lists of detected and suppressed errors, rerun with: -s
==17750== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE INSERCIÓN
=====================[37;1m
[33;1m
Inserción en abb nulo
======================[37;1m
[32;1m✓ [37;1mAl intentar insertar en un abb nulo, se devuelve NULL
==17754== 
==17754== HEAP SUMMARY:
==17754==     in use at exit: 0 bytes in 0 blocks
==17754==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17754== 
==17754== All heap blocks were freed -- no leaks are possible
==17754== 
==17754== For lists of detected and suppressed errors, rerun with: -s
==17754== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Inserciones en abb válido
==========================[37;1m
[32;1m✓ [37;1mEs posible insertar un elemento nulo en un abb válido
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee un elemento
[32;1m✓ [37;1mEs posible insertar un elemento no nulo en un abb válido
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee un elemento
[32;1m✓ [37;1mEs posible insertar un elemento que vive en el heap en un abb válido
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee un elemento
[32;1m✓ [37;1mEs posible insertar un elemento en un abb válido
[32;1m✓ [37;1mEs posible insertar otro elemento
[32;1m✓ [37;1mEs posible insertar otro elemento
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee tres elemento
[32;1m✓ [37;1mSe crea un nuevo arbol y se insertan 500 elementos.El abb no está vacío
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEs posible insertar un elemento en un abb válido
[32;1m✓ [37;1mEs posible insertar otro elemento 
[32;1m✓ [37;1mEs posible insertar un elemento repetido en el abb
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mEl abb posee tres elemento
==17755== 
==17755== HEAP SUMMARY:
==17755==     in use at exit: 0 bytes in 0 blocks
==17755==   total heap usage: 516 allocs, 516 frees, 6,184 bytes allocated
==17755== 
==17755== All heap blocks were freed -- no leaks are possible
==17755== 
==17755== For lists of detected and suppressed errors, rerun with: -s
==17755== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==17753== 
==17753== HEAP SUMMARY:
==17753==     in use at exit: 0 bytes in 0 blocks
==17753==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17753== 
==17753== All heap blocks were freed -- no leaks are possible
==17753== 
==17753== For lists of detected and suppressed errors, rerun with: -s
==17753== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE BÚSQUEDA
====================[37;1m
[33;1m
Búsqueda en abb nulo
=====================[37;1m
[32;1m✓ [37;1mBuscar un elemento válido en un abb nulo devuelve NULL.
==17757== 
==17757== HEAP SUMMARY:
==17757==     in use at exit: 0 bytes in 0 blocks
==17757==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17757== 
==17757== All heap blocks were freed -- no leaks are possible
==17757== 
==17757== For lists of detected and suppressed errors, rerun with: -s
==17757== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Búsqueda de elementos existentes e inexistentes en abb válido
===============================================================[37;1m
[32;1m✓ [37;1mSe encontró el elemento buscado.
[32;1m✓ [37;1mSe buscó un elemento inexistente en un abb y se devolvió NULL.
==17758== 
==17758== HEAP SUMMARY:
==17758==     in use at exit: 0 bytes in 0 blocks
==17758==   total heap usage: 3 allocs, 3 frees, 36 bytes allocated
==17758== 
==17758== All heap blocks were freed -- no leaks are possible
==17758== 
==17758== For lists of detected and suppressed errors, rerun with: -s
==17758== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Pruebas mixtas de búsqueda
===========================[37;1m
[32;1m✓ [37;1mSe creó un abb y se insertó un elemento. Se encuentra ese elemento.
[32;1m✓ [37;1mSe insertan múltiples elementos, algunos repetidos.
[32;1m✓ [37;1mSe busca un elemento que no se encuentra en el abb y se devuelve NULL.
[32;1m✓ [37;1mSe busca uno de los elementos repetidos en el abb y se lo encuentra.
[32;1m✓ [37;1mSe eliminan elementos del abb.
[32;1m✓ [37;1mSe busca un elemento que continúa en el abb y se lo encuentra
[32;1m✓ [37;1mSe busca un elemento que ya no se encuentra en el abb y se devuelve NULL.
==17759== 
==17759== HEAP SUMMARY:
==17759==     in use at exit: 0 bytes in 0 blocks
==17759==   total heap usage: 6 allocs, 6 frees, 64 bytes allocated
==17759== 
==17759== All heap blocks were freed -- no leaks are possible
==17759== 
==17759== For lists of detected and suppressed errors, rerun with: -s
==17759== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==17756== 
==17756== HEAP SUMMARY:
==17756==     in use at exit: 0 bytes in 0 blocks
==17756==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17756== 
==17756== All heap blocks were freed -- no leaks are possible
==17756== 
==17756== For lists of detected and suppressed errors, rerun with: -s
==17756== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE ELIMINACIÓN
=======================[37;1m
[33;1m
Eliminación en abb nulo
========================[37;1m
[32;1m✓ [37;1mNo se puede eliminar de un abb nulo
==17761== 
==17761== HEAP SUMMARY:
==17761==     in use at exit: 0 bytes in 0 blocks
==17761==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17761== 
==17761== All heap blocks were freed -- no leaks are possible
==17761== 
==17761== For lists of detected and suppressed errors, rerun with: -s
==17761== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Eliminación de elementos existentes e inexistentes en abb válido
==================================================================[37;1m
[32;1m✓ [37;1mSe tiene un abb no vacío
[32;1m✓ [37;1mEs posible eliminar el unico elemento que tiene el abb
[32;1m✓ [37;1mEl abb ahora está vacío
[32;1m✓ [37;1mSe tiene un abb no vacío
[32;1m✓ [37;1mEs posible eliminar el unico elemento que tiene el abb
[31;1m✗ [37;1mEl abb ahora está vacío
[32;1m✓ [37;1mSe tiene un abb vacío
[32;1m✓ [37;1mIntentar eliminar un elemento de un abb vacío devuelve NULL
[32;1m✓ [37;1mEl abb continúa vacío
[32;1m✓ [37;1mSe inserta un elemento en el abb. Ahora ya no está vacío
[32;1m✓ [37;1mIntentar eliminar un elemento que no se encuentra en el abb devuelve NULL
[32;1m✓ [37;1mEl abb no borró el elemento que almacenaba
==17762== 
==17762== HEAP SUMMARY:
==17762==     in use at exit: 0 bytes in 0 blocks
==17762==   total heap usage: 6 allocs, 6 frees, 72 bytes allocated
==17762== 
==17762== All heap blocks were freed -- no leaks are possible
==17762== 
==17762== For lists of detected and suppressed errors, rerun with: -s
==17762== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Eliminación de varios elementos de abbs grandes
================================================[37;1m
[32;1m✓ [37;1mTengo un nuevo abb. Su tamaño es 16
[32;1m✓ [37;1mEs posible quitar la raiz
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 15
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, sin nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 14
[32;1m✓ [37;1mEs posible quitar un elemento que tiene dos hijos y varios nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 13
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, con nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 12
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo dercho, con nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 11
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, sin nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 10
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo derecho, sin nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 9
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que tiene hijos derecho e izquierdo
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 8
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, con nietos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 7
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que no tiene hijo izquierdo, así que la reemplaza su hijo derecho
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 6
[32;1m✓ [37;1mEs posible quitar un elemento que no tiene hijos
[32;1m✓ [37;1mBusco el elemento que acabo de borrar del abb y no lo encuentro
[32;1m✓ [37;1mEl tamaño del abb ahora es 5
==17763== 
==17763== HEAP SUMMARY:
==17763==     in use at exit: 0 bytes in 0 blocks
==17763==   total heap usage: 22 allocs, 22 frees, 224 bytes allocated
==17763== 
==17763== All heap blocks were freed -- no leaks are possible
==17763== 
==17763== For lists of detected and suppressed errors, rerun with: -s
==17763== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==17760== 
==17760== HEAP SUMMARY:
==17760==     in use at exit: 0 bytes in 0 blocks
==17760==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17760== 
==17760== All heap blocks were freed -- no leaks are possible
==17760== 
==17760== For lists of detected and suppressed errors, rerun with: -s
==17760== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DEL ITERADOR
====================[37;1m
[33;1m
Iterar un abb nulo
==================[37;1m
[32;1m✓ [37;1mIterar un abb NULL de manera INORDEN devuelve 0
[32;1m✓ [37;1mIterar un abb NULL de manera PREORDEN devuelve 0
[32;1m✓ [37;1mIterar un abb NULL de manera POSTORDEN devuelve 0
==17765== 
==17765== HEAP SUMMARY:
==17765==     in use at exit: 0 bytes in 0 blocks
==17765==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17765== 
==17765== All heap blocks were freed -- no leaks are possible
==17765== 
==17765== For lists of detected and suppressed errors, rerun with: -s
==17765== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Iterar con una función nula
============================[37;1m
[32;1m✓ [37;1mIterar de manera INORDEN un abb válido con una función NULL devuelve 0
[32;1m✓ [37;1mIterar de manera PREORDEN un abb válido con una función NULL devuelve 0
[32;1m✓ [37;1mIterar de manera POSTORDEN un abb válido con una función NULL devuelve 0
==17766== 
==17766== HEAP SUMMARY:
==17766==     in use at exit: 0 bytes in 0 blocks
==17766==   total heap usage: 1 allocs, 1 frees, 12 bytes allocated
==17766== 
==17766== All heap blocks were freed -- no leaks are possible
==17766== 
==17766== For lists of detected and suppressed errors, rerun with: -s
==17766== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Iterar un abb válido
=====================[37;1m
[32;1m✓ [37;1mSe crea un abb.
[32;1m✓ [37;1mSe itera el abb de manera INORDEN en su totalidad con un aux nulo y se devuelve 0 correctamente
[32;1m✓ [37;1mSe itera el abb de manera PREORDEN en su totalidad con un aux nulo y se devuelve 0 correctamente
[32;1m✓ [37;1mSe itera el abb de manera POSTORDEN en su totalidad con un aux nulo y se devuelve 0 correctamente
[32;1m✓ [37;1mSe crea un abb y se insertan varios elementos.
[32;1m✓ [37;1mSe itera el abb de manera INORDEN en su totalidad con un aux nulo y se devuelve la cantidad correcta de elementos
[32;1m✓ [37;1mSe itera el abb de manera PREORDEN en su totalidad con un aux nulo y se devuelve la cantidad correcta de elementos
[32;1m✓ [37;1mSe itera el abb de manera POSTORDEN en su totalidad con un aux nulo y se devuelve la cantidad correcta de elementos
[32;1m✓ [37;1mSe itera un abb de manera INORDEN parcialmente y se devuelve la cantidad correcta.
[32;1m✓ [37;1mSe itera un abb de manera PREORDEN parcialmente y se devuelve la cantidad correcta.
[32;1m✓ [37;1mSe itera un abb de manera POSTORDEN parcialmente y se devuelve la cantidad correcta.
==17767== 
==17767== HEAP SUMMARY:
==17767==     in use at exit: 0 bytes in 0 blocks
==17767==   total heap usage: 13 allocs, 13 frees, 156 bytes allocated
==17767== 
==17767== All heap blocks were freed -- no leaks are possible
==17767== 
==17767== For lists of detected and suppressed errors, rerun with: -s
==17767== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==17764== 
==17764== HEAP SUMMARY:
==17764==     in use at exit: 0 bytes in 0 blocks
==17764==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17764== 
==17764== All heap blocks were freed -- no leaks are possible
==17764== 
==17764== For lists of detected and suppressed errors, rerun with: -s
==17764== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
PRUEBAS DE RECORRIDOS CON ARRAY
===============================[37;1m
[33;1m
Recorrer un abb nulo
====================[37;1m
[32;1m✓ [37;1mSi se intenta recorrer de manera INORDEN un abb NULL, se devuelve el valor 0
[32;1m✓ [37;1mSi se intenta recorrer de manera PREORDEN un abb NULL, se devuelve el valor 0
[32;1m✓ [37;1mSi se intenta recorrer de manera POSTORDEN un abb NULL, se devuelve el valor 0
==17769== 
==17769== HEAP SUMMARY:
==17769==     in use at exit: 0 bytes in 0 blocks
==17769==   total heap usage: 1 allocs, 1 frees, 16 bytes allocated
==17769== 
==17769== All heap blocks were freed -- no leaks are possible
==17769== 
==17769== For lists of detected and suppressed errors, rerun with: -s
==17769== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Recorrer con un array nulo y con tamanio cero
=============================================[37;1m
[32;1m✓ [37;1mSi se intenta recorrer de manera INORDEN un abb válido con un array nulo, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera PREORDEN un abb válido con un array nulo, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera POSTORDEN un abb válido con un array nulo, se devuelve 0
==17771== 
==17771== HEAP SUMMARY:
==17771==     in use at exit: 0 bytes in 0 blocks
==17771==   total heap usage: 1 allocs, 1 frees, 12 bytes allocated
==17771== 
==17771== All heap blocks were freed -- no leaks are possible
==17771== 
==17771== For lists of detected and suppressed errors, rerun with: -s
==17771== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Recorrer un abb válido
=======================[37;1m
[32;1m✓ [37;1mSi se intenta recorrer de manera INORDEN un abb vacío, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera PREORDEN un abb vacío, se devuelve 0
[32;1m✓ [37;1mSi se intenta recorrer de manera POSTORDEN un abb vacío, se devuelve 0
[32;1m✓ [37;1mSe recorre un abb de manera INORDEN con menos elementos que posiciones en el array, y se devuelve la cantidad correcta de elementos.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera PREORDEN con menos elementos que posiciones en el array, y se devuelve la cantidad correcta de elementos.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera POSTORDEN con menos elementos que posiciones en el array, y se devuelve la cantidad correcta de elementos.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera INORDEN con más elementos que posiciones en el array, y se devuelve el tope del array.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mEl cuarto elemento en el array es el correcto
[32;1m✓ [37;1mSe recorre un abb de manera PREORDEN con más elementos que posiciones en el array, y se devuelve el tope del array.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mEl cuarto elemento en el array es el correcto
[31;1m✗ [37;1mSe recorre un abb de manera POSTORDEN con más elementos que posiciones en el array, y se devuelve el tope del array.
[32;1m✓ [37;1mEl primer elemento en el array es el correcto
[32;1m✓ [37;1mEl segundo elemento en el array es el correcto
[32;1m✓ [37;1mEl tercer elemento en el array es el correcto
[32;1m✓ [37;1mEl cuarto elemento en el array es el correcto
==17772== 
==17772== HEAP SUMMARY:
==17772==     in use at exit: 0 bytes in 0 blocks
==17772==   total heap usage: 15 allocs, 15 frees, 196 bytes allocated
==17772== 
==17772== All heap blocks were freed -- no leaks are possible
==17772== 
==17772== For lists of detected and suppressed errors, rerun with: -s
==17772== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[33;1m
Recorrer un abb válido, modificarlo y volver a recorrerlo
==========================================================[37;1m
[32;1m✓ [37;1mEs posible insertar en un nuevo abb
[32;1m✓ [37;1mEl abb posee 1 elemento
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl elemento almacenado es el correcto
[32;1m✓ [37;1mSe insertaron varios elementos. Ahora el abb posee 6 elementos
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mSe vuelve a recorrer el abb y se almacena la nueva cantidad correcta de elementos
[32;1m✓ [37;1mEl primer elemento es el correcto
[32;1m✓ [37;1mEl segundo elemento es el correcto
[32;1m✓ [37;1mEl tercer elemento es el correcto
[32;1m✓ [37;1mEl cuarto elemento es el correcto
[32;1m✓ [37;1mEl quinto elemento es el correcto
[32;1m✓ [37;1mEl sexto elemento es el correcto
[32;1m✓ [37;1mSe inserta un nuevo elemento en el abb, más chico que el menor anterior
[32;1m✓ [37;1mSe inserta un elemento repetido en el abb
[32;1m✓ [37;1mSe inserta un nuevo elemento máximo en el abb, mayor al más grande anterior
[32;1m✓ [37;1mSe insertaron varios elementos. Ahora el abb posee 9 elementos
[32;1m✓ [37;1mEl abb no está vacío
[32;1m✓ [37;1mSe vuelve a recorrer el abb y se almacena la nueva cantidad correcta de elementos
[32;1m✓ [37;1mEl primer elemento es el correcto
[32;1m✓ [37;1mEl segundo elemento es el correcto
[32;1m✓ [37;1mEl tercer elemento es el correcto
[32;1m✓ [37;1mEl cuarto elemento es el correcto
[32;1m✓ [37;1mEl quinto elemento es el correcto
[32;1m✓ [37;1mEl sexto elemento es el correcto
[32;1m✓ [37;1mEl séptimo elemento es el correcto
[32;1m✓ [37;1mEl octavo elemento es el correcto
[32;1m✓ [37;1mEl noveno elemento es el correcto
[32;1m✓ [37;1mTengo un nuevo abb. Su tamaño es 16
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 14º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 15º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 16º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar la raiz
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 14º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 15º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, sin nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 14º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que tiene dos hijos y varios nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 13º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo izquierdo, con nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 12º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo dercho, con nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 11º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, sin nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 10º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que solo tiene hijo derecho, sin nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 9º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que tiene hijos derecho e izquierdo
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 8º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que tiene hijo izquierdo y derecho, con nietos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 7º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar la nueva raiz, que no tiene hijo izquierdo, así que la reemplaza su hijo derecho
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 6º elemento almacenado es el correcto
[32;1m✓ [37;1mEs posible quitar un elemento que no tiene hijos
[32;1m✓ [37;1mSe recorre el abb y se almacena la cantidad correcta de elementos
[32;1m✓ [37;1mEl 1º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 2º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 3º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 4º elemento almacenado es el correcto
[32;1m✓ [37;1mEl 5º elemento almacenado es el correcto
==17773== 
==17773== HEAP SUMMARY:
==17773==     in use at exit: 0 bytes in 0 blocks
==17773==   total heap usage: 34 allocs, 34 frees, 540 bytes allocated
==17773== 
==17773== All heap blocks were freed -- no leaks are possible
==17773== 
==17773== For lists of detected and suppressed errors, rerun with: -s
==17773== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
==17768== 
==17768== HEAP SUMMARY:
==17768==     in use at exit: 0 bytes in 0 blocks
==17768==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17768== 
==17768== All heap blocks were freed -- no leaks are possible
==17768== 
==17768== For lists of detected and suppressed errors, rerun with: -s
==17768== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
[37;1m
---------------------------------
461 pruebas corridas, 4 errores - D:
[0m==17739== 
==17739== HEAP SUMMARY:
==17739==     in use at exit: 0 bytes in 0 blocks
==17739==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==17739== 
==17739== All heap blocks were freed -- no leaks are possible
==17739== 
==17739== For lists of detected and suppressed errors, rerun with: -s
==17739== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
makefile-chanutron:8: recipe for target 'valgrind' failed
make: *** [valgrind] Error 2
